---
import { getCollection } from 'astro:content'
import '@/assets/main.css'
import { ViewTransitions } from 'astro:transitions'
import Progress from '@/components/Progress.vue'

type Props = {
	title?: string
	bodyClass?: string
}

const { title = 'Maxwell Barvian, Design Engineer', bodyClass } = Astro.props

const projectsWithDemos = (
	await getCollection('works', ({ data }) => data.type === 'project' && data.demo)
).map((project) => project.slug)
---

<!doctype html>
<html lang="en" class="bg-white text-black antialiased dark:bg-black dark:text-white">
	<head>
		<meta charset="UTF-8" />
		<meta name="author" content="Maxwell Barvian" />
		<meta name="description" content="The portfolio of Maxwell Barvian, Design Engineer" />
		<meta name="viewport" content="width=device-width" />
		<link rel="shortcut icon" href="/favicon.png" />
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
		<script define:vars={{ projectsWithDemos }} is:inline>
			// @ts-ignore
			window.__PROJECTS_WITH_DEMOS__ = projectsWithDemos
		</script>
		<ViewTransitions fallback="none" />
	</head>
	<body class:list={[bodyClass, 'min-h-[100svh]']}>
		<slot />
		<Progress client:load transition:persist="progress" />
	</body><script>
		import {
			isTransitionBeforePreparationEvent,
			isTransitionBeforeSwapEvent
		} from 'astro:transitions/client'
		import { nextTick } from 'vue'

		function markActiveProject(doc: Document, slug: string) {
			const project = doc.querySelector<HTMLAnchorElement>(`a[data-project][href="${slug}"]`)
			if (!project) return
			window.__PROJECTS_WITH_DEMOS__

			project.dataset.project = 'active'
			document.addEventListener(
				'astro:page-load',
				() => {
					project.dataset.project = ''
				},
				{ once: true }
			)
		}

		document.addEventListener('astro:before-preparation', (event) => {
			if (!isTransitionBeforePreparationEvent(event)) return

			// If we're going to a project page, immediately mark the active project...
			if (event.from.pathname === '/') markActiveProject(document, event.to.pathname)
			document.addEventListener(
				'astro:after-preparation',
				() => {
					// ...otherwise, if we're going home we have to wait for the homepage document to load
					if (event.to.pathname === '/') markActiveProject(event.newDocument, event.from.pathname)

					if (
						window.__PROJECTS_WITH_DEMOS__.includes(event.to.pathname.substring(1)) ||
						window.__PROJECTS_WITH_DEMOS__.includes(event.from.pathname.substring(1))
					)
						event.newDocument.documentElement.dataset.transitionHasDemo = ''
					event.newDocument.documentElement.dataset.transitionFrom = event.from.pathname
					event.newDocument.documentElement.dataset.transitionTo = event.to.pathname
				},
				{ once: true }
			)
		})

		// Flush pending Vue changes before swapping
		document.addEventListener('astro:before-swap', (event) => {
			if (!isTransitionBeforeSwapEvent(event)) return
			const defaultSwap = event.swap
			event.swap = async () => {
				await nextTick()
				defaultSwap()
			}
		})

		document.addEventListener('astro:after-transition', () => {
			delete document.documentElement.dataset.transitionTo
			// Don't delete these, because they get used in back button:
			// delete document.documentElement.dataset.transitionHasDemo
			// delete document.documentElement.dataset.transitionFrom
		})
	</script>

	<style is:global>
		/* Use a spring by for the parts that transform */
		::view-transition-group(*),
		::view-transition-image-pair(*) {
			/* https://linear-easing-generator.netlify.app/?codeType=js&code=const+%5Bduration%2C+func%5D+%3D+createSpring%28%7B%0A++mass%3A+1%2C%0A++stiffness%3A+194.95515%2C%0A++damping%3A+27.92527%2C%0A++velocity%3A+0%2C%0A%7D%29%3B%0A%0A%2F*%0A++Export+your+easing+function+as+a+global.%0A++The+name+you+use+here+will+appear+in+the+output.%0A++The+easing+function+must+take+a+number+as+input%2C%0A++where+0+is+the+start%2C+and+1+is+the+end.%0A++It+must+return+the+%27eased%27+value.%0A*%2F%0Aself.spring+%3D+func%3B%0A%2F*%0A++Some+easings+have+an+ideal+duration%2C+like+this+one.%0A++You+can+export+it+to+the+global%2C+in+milliseconds%2C%0A++and+it+will+be+used+in+the+output.%0A++This+is+optional.%0A*%2F%0Aself.duration+%3D+duration%3B%0A%0Afunction+createSpring%28%7B+mass%2C+stiffness%2C+damping%2C+velocity+%7D%29+%7B%0A++const+w0+%3D+Math.sqrt%28stiffness+%2F+mass%29%3B%0A++const+zeta+%3D+damping+%2F+%282+*+Math.sqrt%28stiffness+*+mass%29%29%3B%0A++const+wd+%3D+zeta+%3C+1+%3F+w0+*+Math.sqrt%281+-+zeta+*+zeta%29+%3A+0%3B%0A++const+b+%3D+zeta+%3C+1+%3F+%28zeta+*+w0+%2B+-velocity%29+%2F+wd+%3A+-velocity+%2B+w0%3B%0A%0A++function+solver%28t%29+%7B%0A++++if+%28zeta+%3C+1%29+%7B%0A++++++t+%3D%0A++++++++Math.exp%28-t+*+zeta+*+w0%29+*%0A++++++++%281+*+Math.cos%28wd+*+t%29+%2B+b+*+Math.sin%28wd+*+t%29%29%3B%0A++++%7D+else+%7B%0A++++++t+%3D+%281+%2B+b+*+t%29+*+Math.exp%28-t+*+w0%29%3B%0A++++%7D%0A%0A++++return+1+-+t%3B%0A++%7D%0A%0A++const+duration+%3D+%28%28%29+%3D%3E+%7B%0A++++const+step+%3D+1+%2F+6%3B%0A++++let+time+%3D+0%3B%0A%0A++++while+%28true%29+%7B%0A++++++if+%28Math.abs%281+-+solver%28time%29%29+%3C+0.001%29+%7B%0A++++++++const+restStart+%3D+time%3B%0A++++++++let+restSteps+%3D+1%3B%0A++++++++while+%28true%29+%7B%0A++++++++++time+%2B%3D+step%3B%0A++++++++++if+%28Math.abs%281+-+solver%28time%29%29+%3E%3D+0.001%29+break%3B%0A++++++++++restSteps%2B%2B%3B%0A++++++++++if+%28restSteps+%3D%3D%3D+16%29+return+restStart%3B%0A++++++++%7D%0A++++++%7D%0A++++++time+%2B%3D+step%3B%0A++++%7D%0A++%7D%29%28%29%3B%0A%0A++return+%5Bduration+*+1000%2C+%28t%29+%3D%3E+solver%28duration+*+t%29%5D%3B%0A%7D&simplify=0.0017&round=3 */
			/* Perceptually: 450ms */
			/* Ideally: */
			/* animation-timing-function: spring(450ms) */
			animation-timing-function: linear(
				0, 0.005, 0.02 2.3%, 0.082 5.1%, 0.463 16.8%, 0.557, 0.638, 0.708, 0.768 30%,
				0.819, 0.862 37.4%, 0.9 41.8%, 0.931 46.7%, 0.955 52.2%, 0.972 58.5%,
				0.984 65.5%, 0.992 74.1%, 0.997 84.9%, 0.999
			);
			animation-duration: 575ms;
		}
		
		/* And an ease for the parts that don't transform */
		::view-transition-old(*),
		::view-transition-new(*) {
			animation-timing-function: ease-out;
			animation-duration: 300ms;
		}

		::view-transition-old(root),
		::view-transition-new(root) {
			transform-origin: top center;
		}

		/* Speed up parts that don't move a lot */

		::view-transition-group(root),
		::view-transition-image-pair(root) {
			animation-timing-function: linear(
				0, 0.005, 0.02 2%, 0.08 4.5%, 0.469 15.1%, 0.567, 0.65, 0.723 24.3%,
				0.784 27.6%, 0.836 31.1%, 0.878 34.8%, 0.914 39%, 0.943 43.7%, 0.964 49.1%,
				0.979 55.3%, 0.989 62.3%, 0.995 71%, 1
			);
			animation-duration: 500ms;
		}


		/* Speed up for back */
		[data-astro-transition="back"]::view-transition-group(*),
		[data-astro-transition="back"]::view-transition-image-pair(*) {
			animation-timing-function: linear(
				0, 0.005, 0.02 2%, 0.08 4.5%, 0.469 15.1%, 0.567, 0.65, 0.723 24.3%,
				0.784 27.6%, 0.836 31.1%, 0.878 34.8%, 0.914 39%, 0.943 43.7%, 0.964 49.1%,
				0.979 55.3%, 0.989 62.3%, 0.995 71%, 1
			);
			animation-duration: 575ms;
		}

		[data-astro-transition="back"]::view-transition-old(*),
		[data-astro-transition="back"]::view-transition-new(*) {
			animation-duration: 250ms;
		}

		/* Exit animations */

		[data-transition-from='/']::view-transition-image-pair(root) {
			animation-name: push;
		}

		[data-transition-from='/']::view-transition-new(root) {
			animation: none;
			opacity: 0;
		}

		/* Entrance animations */

		[data-transition-to='/']::view-transition-image-pair(root) {
			animation-name: pop;
		}

		[data-transition-to='/']::view-transition-old(root) {
			animation: none;
			opacity: 0;
		}

		::view-transition-group(project-hero) {
			z-index: 10;
		}

		:not([data-transition-has-demo])::view-transition-old(project-hero) {
			/* This is a persistent element, so let the new always show on top. See https://developer.chrome.com/docs/web-platform/view-transitions#making_the_most_of_content_you_already_have */
			animation: none;
			opacity: 0;
		}

		:not([data-transition-has-demo])::view-transition-new(project-hero) {
			animation: none;
		}

		@keyframes push {
			to {
				transform: scale(0.9);
				opacity: 0;
				/* filter: blur(theme(blur.lg)) saturate(50%) */
			}
		}

		@keyframes pop {
			from {
				transform: scale(0.9);
				opacity: 0;
				/* filter: blur(theme(blur.lg)) saturate(50%) */
			}
		}

		/* Project Header */

		/* ::view-transition-group(project-header) {
			overflow: clip;
		}

		::view-transition-old(project-header),
		::view-transition-new(project-header) {
			height: 100%;
			object-fit: cover;
			object-position: bottom center;
		} */

		/* Project Content */

		/* Prevent the content from overlaying the other cards */
		[data-transition-from='/']::view-transition-old(project-content),
		[data-transition-from='/']::view-transition-new(project-content){
			animation-delay: 100ms;
		}

		[data-transition-to='/']::view-transition-old(project-content),
		[data-transition-to='/']::view-transition-new(project-content) {
			animation-duration: 125ms;
		}
		
		[data-astro-transition="back"][data-transition-to='/']::view-transition-old(project-content),
		[data-astro-transition="back"][data-transition-to='/']::view-transition-new(project-content) {
			animation-duration: 100ms;
		}
	</style>
</html>
