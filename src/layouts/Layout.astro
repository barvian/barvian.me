---
import { getCollection } from 'astro:content'
import '@/assets/main.css'
import { ViewTransitions } from 'astro:transitions'
import Progress from '@/components/Progress.vue'

type Props = {
	title?: string
	bodyClass?: string
}

const { title = 'Maxwell Barvian, Design Engineer', bodyClass } = Astro.props

const projectsWithDemos = (
	await getCollection('works', ({ data }) => data.type === 'project' && data.demo)
).map((project) => project.slug)
---

<!doctype html>
<html lang="en" class="bg-white text-black antialiased dark:bg-black dark:text-white">
	<head>
		<meta charset="UTF-8" />
		<meta name="author" content="Maxwell Barvian" />
		<meta name="description" content="The portfolio of Maxwell Barvian, Design Engineer" />
		<meta name="viewport" content="width=device-width" />
		<link rel="shortcut icon" href="/favicon.png" />
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
		<script define:vars={{ projectsWithDemos }} is:inline>
			// @ts-ignore
			window.__PROJECTS_WITH_DEMOS__ = projectsWithDemos
		</script>
		<ViewTransitions fallback="none" />
	</head>
	<body class:list={[bodyClass, 'min-h-[100svh]']}>
		<slot />
		<Progress client:load transition:persist="progress" />
	</body><script>
		import {
			isTransitionBeforePreparationEvent,
			isTransitionBeforeSwapEvent
		} from 'astro:transitions/client'
		import { nextTick } from 'vue'

		function markActiveProject(doc: Document, slug: string) {
			const project = doc.querySelector<HTMLAnchorElement>(`a[data-project][href="${slug}"]`)
			if (!project) return
			window.__PROJECTS_WITH_DEMOS__

			project.dataset.project = 'active'
			document.addEventListener(
				'astro:page-load',
				() => {
					project.dataset.project = ''
				},
				{ once: true }
			)
		}

		document.addEventListener('astro:before-preparation', (event) => {
			if (!isTransitionBeforePreparationEvent(event)) return

			// If we're going to a project page, immediately mark the active project...
			if (event.from.pathname === '/') markActiveProject(document, event.to.pathname)
			document.addEventListener(
				'astro:after-preparation',
				() => {
					// ...otherwise, if we're going home we have to wait for the homepage document to load
					if (event.to.pathname === '/') markActiveProject(event.newDocument, event.from.pathname)

					if (
						window.__PROJECTS_WITH_DEMOS__.includes(event.to.pathname.substring(1)) ||
						window.__PROJECTS_WITH_DEMOS__.includes(event.from.pathname.substring(1))
					)
						event.newDocument.documentElement.dataset.transitionHasDemo = ''
					event.newDocument.documentElement.dataset.transitionFrom = event.from.pathname
					event.newDocument.documentElement.dataset.transitionTo = event.to.pathname
				},
				{ once: true }
			)
		})

		// Flush pending Vue changes before swapping
		document.addEventListener('astro:before-swap', (event) => {
			if (!isTransitionBeforeSwapEvent(event)) return
			const defaultSwap = event.swap
			event.swap = async () => {
				await nextTick()
				defaultSwap()
			}
		})

		document.addEventListener('astro:after-transition', () => {
			delete document.documentElement.dataset.transitionTo
			// Don't delete these, because they get used in back button:
			// delete document.documentElement.dataset.transitionHasDemo
			// delete document.documentElement.dataset.transitionFrom
		})
	</script>

	<style is:global>
		/* Use a spring by for the parts that transform */
		::view-transition-group(*),
		::view-transition-image-pair(*) {
			animation-duration: 550ms; /* match the spring duration */
			animation-timing-function: theme('transitionTimingFunction[spring-450/550]');
		}
		
		/* And an ease for the parts that don't transform */
		::view-transition-old(*),
		::view-transition-new(*) {
			animation-timing-function: ease;
			animation-duration: 450ms; /* match the spring perceived duration */
		}

		::view-transition-old(root),
		::view-transition-new(root) {
			transform-origin: top center;
		}

		/* Exit animations */

		[data-transition-from='/']::view-transition-image-pair(root) {
			animation-name: push;
		}

		[data-transition-from='/']::view-transition-new(root) {
			animation: none;
			opacity: 0;
		}

		/* Entrance animations */

		[data-transition-to='/']::view-transition-image-pair(root) {
			animation-name: pop;
		}

		[data-transition-to='/']::view-transition-old(root) {
			animation: none;
			opacity: 0;
		}

		::view-transition-group(project-hero) {
			z-index: 10;
		}

		:not([data-transition-has-demo])::view-transition-old(project-hero) {
			/* This is a persistent element, so let the new always show on top. See https://developer.chrome.com/docs/web-platform/view-transitions#making_the_most_of_content_you_already_have */
			animation: none;
			opacity: 0;
		}

		:not([data-transition-has-demo])::view-transition-new(project-hero) {
			animation: none;
		}

		@keyframes push {
			to {
				transform: scale(0.9);
				opacity: 0;
				/* filter: blur(theme(blur.lg)) saturate(50%) */
			}
		}

		@keyframes pop {
			from {
				transform: scale(0.9);
				opacity: 0;
				/* filter: blur(theme(blur.lg)) saturate(50%) */
			}
		}

		/* Project Header */

		/* [data-transition-from='/']::view-transition-old(project-header),
		[data-transition-to='/']::view-transition-new(project-header) {
			opacity: 0;
			animation: none;
		}

		[data-transition-from='/']::view-transition-new(project-header),
		[data-transition-to='/']::view-transition-old(project-header) {
			animation: none;
		} */

		/* Project Content */

		::view-transition-group(project-content) {
			overflow: clip;
		}

		::view-transition-old(project-content),
		::view-transition-new(project-content) {
			object-fit: cover;
			object-position: bottom center;
			/* object-position: top center; */
			height: 100%;
			/* width: 100%;
			height: auto; */
		}
	</style>
</html>
