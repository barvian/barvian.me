---
import { getEntries } from 'astro:content'
import Layout from '@/layouts/Layout.astro'
import { isProjectEntry } from '@/schemas/work'
import Button from '@/components/Button.vue'
import External from '@/components/icons/External.vue'
import ProjectVideo from '@/components/ProjectVideo.astro'
import { getEntry } from 'astro:content'
import Image from '@/components/Image.astro'
import Link from '@/components/Link.vue'
import * as path from 'node:path'
import type { AstroComponentFactory } from 'astro/runtime/server/index.js'
import pkg from '/package.json'
import { getCollection } from 'astro:content'

export async function getStaticPaths() {
	const projects = await getCollection('works', isProjectEntry)
	return projects.map((entry) => ({
		params: { project: entry.slug },
		props: { entry }
	}))
}

const { entry } = Astro.props
const { data } = entry
const company = data.for && (await getEntry(data.for))
const using = data.using && (await getEntries(data.using))
const { Content } = await entry.render()

const demoBasename = data.demo && (typeof data.demo === 'string' ? data.demo : data.demo.file)
const repo =
	data.repo ??
	(data.demo &&
		(typeof data.demo === 'object' && data.demo.main ?
			`https://github.com/${pkg.repository}/tree/main${path.resolve(`/content/${entry.collection}/${path.dirname(entry.id)}`, data.demo.main)}`
		:	`https://github.com/${pkg.repository}/tree/main/content/${entry.collection}/${path.dirname(entry.id)}/${demoBasename}.astro`))
// Rules for analyzable dynamic imports: https://github.com/rollup/plugins/tree/master/packages/dynamic-import-vars#limitations
const Demo =
	demoBasename &&
	((await import(`../content/${entry.collection}/${path.dirname(entry.id)}/${demoBasename}.astro`))
		.default as AstroComponentFactory)
---

<Layout bodyClass="container" title={`${data.title}, by Maxwell Barvian`}>
	<header
		class="max-xl:mx-auto max-xl:mb-8 max-xl:max-w-prose max-xl:~pt-8/16 xl:fixed xl:~top-8/16"
	>
		<nav>
			<a
				href="/"
				onclick="return document.documentElement.dataset.transitionFrom === '/' && history.state.index > 0 ? (history.back(), false) : undefined"
				class="group flex w-fit items-center gap-3.5 outline-none"
			>
				<div
					class="w-fit opacity-45 transition-opacity group-hover:opacity-85 group-focus-visible:outline group-active:opacity-65 group-active:duration-200"
					style="view-transition-name: back"
				>
					<External class="h-2.5 rotate-225" />
				</div>
				<div class="relative">
					<span
						style="view-transition-name: name"
						class="opacity-45 transition-opacity group-hover:opacity-85 group-active:opacity-65 group-active:duration-200"
						>Maxwell Barvian</span
					>
					<span
						aria-hidden="true"
						class="invisible absolute left-0 top-full whitespace-nowrap"
						style="view-transition-name: title">Design Engineer</span
					>
				</div>
			</a>
		</nav>
	</header>
	<main>
		<article class="mx-auto max-w-prose ~pb-12/20 xl:~pt-8/16">
			<header style="view-transition-name: project-header;">
				<div class="flex items-start gap-6 sm:items-center">
					<div class="flex-1">
						<h1 class="text-2xl font-medium">{data.title}</h1>
						<div class="mt-0.5 flex items-center gap-2 text-sm">
							{
								company && (
									<>
										<span>
											<span class="opacity-75">For</span>
											{company.data.logo && (
												<Image
													class="relative -top-[0.0625rem] inline-block h-3.5 align-middle max-sm:hidden"
													alt={`${company.data.name} logo`}
													src={company.data.logo}
												/>
											)}
											<Link
												class="link-underline cursor-external font-medium"
												href={company.data.url}
											>
												{company.data.name}
											</Link>
										</span>
										<span class="opacity-75">Â·</span>
									</>
								)
							}
							{
								data.date && (
									<time pubdate datetime={data.date.toISOString()} class="opacity-75">
										<span class="max-sm:hidden">
											{data.date.toLocaleDateString('en-us', {
												month: 'long',
												year: 'numeric'
											})}
										</span>
										<span class="sm:hidden">
											{data.date.toLocaleDateString('en-us', {
												month: 'short',
												year: 'numeric'
											})}
										</span>
									</time>
								)
							}
						</div>
					</div>
					<div class="flex gap-4">
						{repo && <Button preset="secondary" iconStrokeWidth={1.5} icon="github" href={repo} />}
						{
							data.url && (
								<>
									<Button class="sm:hidden" icon="external" href={data.url} />
									<Button class="max-sm:hidden" icon="external" href={data.url}>
										View live
									</Button>
								</>
							)
						}
					</div>
				</div>
				{
					Demo ?
						<div class="mt-10 @container" style="view-transition-name: project-hero">
							<div class="aspect-golden overflow-clip rounded-2.5cqw">
								<Demo />
							</div>
						</div>
					:	<div class="group/hero relative mt-10 @container">
							<ProjectVideo {entry} />
						</div>
				}
			</header>
			<div style="view-transition-name: project-content">
				{
					using && (
						<div role="group" aria-label="Tools used" class="mt-10 flex flex-wrap gap-3">
							{using?.map((tool) => (
								<Button
									size="sm"
									preset="secondary"
									class="inactive:text-current/75"
									href={tool.data.url}
								>
									{tool.data.name}
								</Button>
							))}
						</div>
					)
				}
				<div class="prose-a:link-underline prose prose-lg prose-neutral mt-10 dark:prose-invert">
					<Content components={{ a: Link }} />
				</div>
			</div>
		</article>
	</main>
</Layout>
