diff --git a/node_modules/astro-tweet/src/Tweet.astro b/node_modules/astro-tweet/src/Tweet.astro
index 9ef5740..138d737 100644
--- a/node_modules/astro-tweet/src/Tweet.astro
+++ b/node_modules/astro-tweet/src/Tweet.astro
@@ -2,6 +2,7 @@
 import TweetContent from "./TweetContent.astro";
 
 interface Props {
+  className?: string;
   id: string;
   // TODO: add support for custom components (do we need this though?)
   // components?: TwitterComponents;
diff --git a/node_modules/astro-tweet/src/TweetContent.astro b/node_modules/astro-tweet/src/TweetContent.astro
index 8084b74..01dbb43 100644
--- a/node_modules/astro-tweet/src/TweetContent.astro
+++ b/node_modules/astro-tweet/src/TweetContent.astro
@@ -5,12 +5,13 @@ import TweetNotFound from "./twitter-theme/TweetNotFound.astro";
 import type { TwitterComponents } from "./twitter-theme/types";
 interface Props {
   id: string;
+  className?: string;
   components?: TwitterComponents;
   fetchOptions?: RequestInit;
   onError?: ((error: any) => any) | undefined;
 }
 
-const { id, components, fetchOptions, onError } = Astro.props;
+const { id, components, fetchOptions, onError, className } = Astro.props;
 let error;
 const tweet = id
   ? await getTweet(id, fetchOptions).catch((err) => {
@@ -35,6 +36,6 @@ if (!tweet) {
   tweetNotFound ? (
     <NotFound error={error} />
   ) : (
-    <EmbeddedTweet tweet={tweet!} components={components} />
+    <EmbeddedTweet {className} tweet={tweet!} components={components} />
   )
 }
diff --git a/node_modules/astro-tweet/src/twitter-theme/EmbeddedTweet.astro b/node_modules/astro-tweet/src/twitter-theme/EmbeddedTweet.astro
index fd68fcc..a9135a9 100644
--- a/node_modules/astro-tweet/src/twitter-theme/EmbeddedTweet.astro
+++ b/node_modules/astro-tweet/src/twitter-theme/EmbeddedTweet.astro
@@ -13,15 +13,16 @@ import QuotedTweet from "./quoted-tweet/QuotedTweet.astro";
 import { enrichTweet } from "../utils.js";
 
 type Props = {
+  className?: string;
   tweet: Tweet;
   components?: Omit<TwitterComponents, "TweetNotFound">;
 };
 
-const { tweet: t, components } = Astro.props;
+const { tweet: t, components, className } = Astro.props;
 const tweet = enrichTweet(t);
 ---
 
-<TweetContainer>
+<TweetContainer {className}>
   <TweetHeader tweet={tweet} components={components} />
   {tweet.in_reply_to_status_id_str && <TweetInReplyTo tweet={tweet} />}
   <TweetBody tweet={tweet} />
diff --git a/node_modules/astro-tweet/src/utils.ts b/node_modules/astro-tweet/src/utils.ts
index 66166d2..1240fd3 100644
--- a/node_modules/astro-tweet/src/utils.ts
+++ b/node_modules/astro-tweet/src/utils.ts
@@ -77,10 +77,10 @@ export const getMp4Video = (media: MediaAnimatedGif | MediaVideo) => {
   return mp4Videos.length > 1 ? mp4Videos[1] : mp4Videos[0];
 };
 
+const formatter = new Intl.NumberFormat('en-US', { notation: 'compact', compactDisplay: 'short', roundingMode: 'trunc' })
+
 export const formatNumber = (n: number): string => {
-  if (n > 999999) return `${(n / 1000000).toFixed(1)}M`;
-  if (n > 999) return `${(n / 1000).toFixed(1)}K`;
-  return n.toString();
+  return formatter.format(n)
 };
 
 type TextEntity = {
