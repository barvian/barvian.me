---
import { getCollection } from 'astro:content'
import '/assets/main.css'
import { ViewTransitions } from 'astro:transitions'

type Props = {
	title?: string
	bodyClass?: string
}

const { title = 'Maxwell Barvian, Front-end Developer', bodyClass } = Astro.props

const projectsWithDemos = (
	await getCollection('works', ({ data }) => data.type === 'project' && data.demo)
).map((project) => project.slug)
---

<!doctype html>
<html lang="en" class="bg-white text-black antialiased dark:bg-black dark:text-white">
	<head>
		<meta charset="UTF-8" />
		<meta name="author" content="Maxwell Barvian"/>
		<meta name="description" content="Front-end Developer" />
		<meta name="viewport" content="width=device-width" />
		<link rel="shortcut icon" href="/favicon.png" />
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
		<script define:vars={{ projectsWithDemos }}>
			// @ts-ignore
			window.__PROJECTS_WITH_DEMOS__ = projectsWithDemos
		</script>
		<ViewTransitions fallback="none" />
	</head>
	<body class:list={[bodyClass, 'min-h-[100svh]']}>
		<slot />
	</body>
</html>

<script>
	import {
		isTransitionBeforePreparationEvent,
		isTransitionBeforeSwapEvent
	} from 'astro:transitions/client'
	import { nextTick } from 'vue'

	function markActiveProject(doc: Document, slug: string) {
		const project = doc.querySelector<HTMLAnchorElement>(`a[data-project][href="${slug}"]`)
		if (!project) return
		window.__PROJECTS_WITH_DEMOS__

		project.dataset.project = 'active'
		document.addEventListener(
			'astro:page-load',
			() => {
				project.dataset.project = ''
			},
			{ once: true }
		)
	}

	document.addEventListener('astro:before-preparation', (event) => {
		if (!isTransitionBeforePreparationEvent(event)) return

		// If we're going to a project page, immediately mark the active project...
		if (event.from.pathname === '/') markActiveProject(document, event.to.pathname)
		document.addEventListener(
			'astro:after-preparation',
			() => {
				// ...otherwise, if we're going home we have to wait for the homepage document to load
				if (event.to.pathname === '/') markActiveProject(event.newDocument, event.from.pathname)

				if (
					window.__PROJECTS_WITH_DEMOS__.includes(event.to.pathname.substring(1)) ||
					window.__PROJECTS_WITH_DEMOS__.includes(event.from.pathname.substring(1))
				)
					event.newDocument.documentElement.dataset.transitionHasDemo = ''
				event.newDocument.documentElement.dataset.transitionFrom = event.from.pathname
				event.newDocument.documentElement.dataset.transitionTo = event.to.pathname
			},
			{ once: true }
		)
	})

	// Flush pending Vue changes before swapping
	document.addEventListener('astro:before-swap', (event) => {
		if (!isTransitionBeforeSwapEvent(event)) return
		const defaultSwap = event.swap
		event.swap = async () => {
			await nextTick()
			defaultSwap()
		}
	})

	document.addEventListener('astro:after-transition', () => {
		delete document.documentElement.dataset.transitionTo
		// Don't delete these, because they get used in back button:
		// delete document.documentElement.dataset.transitionHasDemo
		// delete document.documentElement.dataset.transitionFrom
	})
</script>

<style is:global>
	::view-transition-group(*),
	::view-transition-old(*),
	::view-transition-new(*) {
		animation-duration: theme(
			'transitionDuration.450'
		); /* verbose, but I like haing to use theme values */
		animation-timing-function: theme('transitionTimingFunction.DEFAULT');
	}

	::view-transition-old(root),
	::view-transition-new(root) {
		transform-origin: top center;
	}

	/* Exit animations */
	[data-transition-from='/']::view-transition-old(root),
	[data-transition-from='/']::view-transition-old(title),
	[data-transition-from='/']::view-transition-new(title) {
		animation-duration: theme('transitionDuration.350');
	}

	[data-transition-from='/']::view-transition-old(root) {
		animation-name: push;
	}

	[data-transition-from='/']::view-transition-new(root) {
		animation: none;
		opacity: 0;
	}

	/* Entrance animations */
	[data-transition-to='/']::view-transition-new(root),
	[data-transition-to='/']::view-transition-old(title),
	[data-transition-to='/']::view-transition-new(title) {
		/* animation-timing-function: theme('transitionTimingFunction.out'); */
		/* animation-duration: theme('transitionDuration.350'); */
		/* animation-delay: calc(theme('transitionDuration.450') - theme('transitionDuration.350')) */
	}

	[data-transition-to='/']::view-transition-new(root) {
		animation-name: pop;
	}

	[data-transition-to='/']::view-transition-old(root) {
		animation: none;
		opacity: 0;
	}

	:not([data-transition-has-demo])::view-transition-old(project-hero) {
		/* This is a persistent element, so let the new always show on top. See https://developer.chrome.com/docs/web-platform/view-transitions#making_the_most_of_content_you_already_have */
		animation: none;
		opacity: 0;
	}

	:not([data-transition-has-demo])::view-transition-new(project-hero) {
		animation: none;
	}

	@keyframes push {
		to {
			transform: scale(0.9);
			opacity: 0;
			/* filter: blur(30px) saturate(50%) */
		}
	}

	@keyframes pop {
		from {
			transform: scale(0.9);
			opacity: 0;
			/* filter: blur(30px) saturate(50%) */
		}
	}
</style>
